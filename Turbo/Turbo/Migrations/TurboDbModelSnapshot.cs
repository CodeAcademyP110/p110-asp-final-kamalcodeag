// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Turbo.Data;

namespace Turbo.Migrations
{
    [DbContext(typeof(TurboDb))]
    partial class TurboDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Turbo.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutomobileId");

                    b.Property<string>("CustomUserId");

                    b.Property<bool>("IsVIP");

                    b.Property<int?>("LocationId")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AutomobileId");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new { Id = 1, AutomobileId = 1, IsVIP = true, LocationId = 10, PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, AutomobileId = 2, IsVIP = true, LocationId = 7, PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, AutomobileId = 9, IsVIP = true, LocationId = 3, PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, AutomobileId = 7, IsVIP = true, LocationId = 8, PublishDate = new DateTime(2018, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, AutomobileId = 3, IsVIP = true, LocationId = 1, PublishDate = new DateTime(2018, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, AutomobileId = 4, IsVIP = true, LocationId = 2, PublishDate = new DateTime(2018, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, AutomobileId = 5, IsVIP = true, LocationId = 2, PublishDate = new DateTime(2018, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 8, AutomobileId = 6, IsVIP = true, LocationId = 2, PublishDate = new DateTime(2017, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 9, AutomobileId = 8, IsVIP = true, LocationId = 4, PublishDate = new DateTime(2017, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 10, AutomobileId = 14, IsVIP = false, LocationId = 4, PublishDate = new DateTime(2017, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 11, AutomobileId = 20, IsVIP = false, LocationId = 6, PublishDate = new DateTime(2017, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 12, AutomobileId = 13, IsVIP = false, LocationId = 10, PublishDate = new DateTime(2017, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 13, AutomobileId = 17, IsVIP = false, LocationId = 10, PublishDate = new DateTime(2016, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 14, AutomobileId = 20, IsVIP = false, LocationId = 10, PublishDate = new DateTime(2016, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 15, AutomobileId = 16, IsVIP = false, LocationId = 3, PublishDate = new DateTime(2016, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 16, AutomobileId = 20, IsVIP = false, LocationId = 3, PublishDate = new DateTime(2016, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 17, AutomobileId = 11, IsVIP = false, LocationId = 5, PublishDate = new DateTime(2016, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 18, AutomobileId = 12, IsVIP = false, LocationId = 5, PublishDate = new DateTime(2016, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 19, AutomobileId = 14, IsVIP = false, LocationId = 7, PublishDate = new DateTime(2016, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 20, AutomobileId = 11, IsVIP = false, LocationId = 5, PublishDate = new DateTime(2016, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Turbo.Models.Automobile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .IsRequired();

                    b.Property<int>("Distance");

                    b.Property<int?>("FuelId")
                        .IsRequired();

                    b.Property<string>("FullInfo")
                        .HasMaxLength(255);

                    b.Property<string>("MainPhotoURL");

                    b.Property<int?>("ModelId")
                        .IsRequired();

                    b.Property<int?>("Motor")
                        .IsRequired();

                    b.Property<decimal?>("Price")
                        .IsRequired();

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("SpeedControlId")
                        .IsRequired();

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SpeedControlId");

                    b.ToTable("Automobiles");

                    b.HasData(
                        new { Id = 1, ColorId = 11, Distance = 25000, FuelId = 1, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "33145_GoTuNDe2_1Hci2mf8rS0uw.jpg", ModelId = 1, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, ColorId = 12, Distance = 25000, FuelId = 5, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "67038_381FSTlcAuGmqGQgjqbYMg.jpg", ModelId = 2, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, ColorId = 13, Distance = 25000, FuelId = 2, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "15000_Vho1XKv9QZ_a5HbeoPjDKQ.jpg", ModelId = 4, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, ColorId = 14, Distance = 25000, FuelId = 4, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "66422_denAN4P_5rj8A-92CBxoDg.jpg", ModelId = 3, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, ColorId = 15, Distance = 25000, FuelId = 3, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "51152_I9gRDA5diO-eB-RtZCnceA.jpg", ModelId = 10, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, ColorId = 1, Distance = 25000, FuelId = 3, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "43207_n_Wut51cleHe07LUbJr5xA.jpg", ModelId = 9, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, ColorId = 2, Distance = 25000, FuelId = 3, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "70050_4G0sJsd6Rj0oHMODwYfznw.jpg", ModelId = 9, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 8, ColorId = 3, Distance = 25000, FuelId = 1, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "23323_JObOb4nGSseXgiQwIgNz3g.jpg", ModelId = 9, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 9, ColorId = 4, Distance = 25000, FuelId = 1, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "12365_Fg7VfwJWa9t4Vj0ytGwz7Q.jpg", ModelId = 8, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 10, ColorId = 5, Distance = 25000, FuelId = 1, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "87348_dKIhlYqS5IrdKUMvRd5Ivg.jpg", ModelId = 3, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 11, ColorId = 6, Distance = 25000, FuelId = 1, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "60461_f2BISM8F-s8ju9poz1lfYw.jpg", ModelId = 5, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 12, ColorId = 7, Distance = 25000, FuelId = 2, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "75569_8HIZ1tMLO55qUma60s5mrQ.jpg", ModelId = 5, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 13, ColorId = 8, Distance = 25000, FuelId = 2, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "60461_gVWXF6f9RQH-aL2rWq7KOw.jpg", ModelId = 2, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 14, ColorId = 9, Distance = 25000, FuelId = 5, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "60461_H7loK1K_Yahr6uSFbrn6ew.jpg", ModelId = 7, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 15, ColorId = 10, Distance = 25000, FuelId = 3, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "87360_1OqT7-GeTXepqeuzWXLP6g.jpg", ModelId = 6, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 16, ColorId = 11, Distance = 25000, FuelId = 4, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "60467_NKiaoEWoQOcGsnK9iFveHA.jpg", ModelId = 1, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 17, ColorId = 12, Distance = 25000, FuelId = 5, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "43731_GTg_M--EPHYg9gSOYzN-aQ.jpg", ModelId = 2, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 2, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 18, ColorId = 13, Distance = 25000, FuelId = 5, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "60469_wri7h82Ga9pVtu4-JSmKnw.jpg", ModelId = 3, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 19, ColorId = 14, Distance = 25000, FuelId = 2, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "67383_HPpLv_MRWn7arkJp_nhk8g.jpg", ModelId = 3, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 20, ColorId = 15, Distance = 25000, FuelId = 2, FullInfo = "Saz vəziyyətdədir. Ciddi şəxslər əlaqə saxlasın. Endirim mümkündür.", MainPhotoURL = "58760_3nFpzrKv9mqLAg155HhKnQ.jpg", ModelId = 10, Motor = 9000, Price = 20000m, ShortInfo = "Əla maşındır", SpeedControlId = 1, Year = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Turbo.Models.AutoPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutomobileId");

                    b.Property<string>("PhotoURL");

                    b.HasKey("Id");

                    b.HasIndex("AutomobileId");

                    b.ToTable("AutoPhotos");

                    b.HasData(
                        new { Id = 1, AutomobileId = 1, PhotoURL = "2F5238_xBQPbBFrgTl3N58mkhH2aQ.jpg" },
                        new { Id = 2, AutomobileId = 1, PhotoURL = "2F33145_XZnjox0Y9H7xB5NtUj3aVg.jpg" },
                        new { Id = 3, AutomobileId = 2, PhotoURL = "2F99902_UOZjBj_8RJaljvtbYB9U-Q.jpg" },
                        new { Id = 4, AutomobileId = 2, PhotoURL = "2F67040_ubZwwgxdPCJksE-izaLWEw.jpg" },
                        new { Id = 5, AutomobileId = 2, PhotoURL = "2F67037_OgOY9xRmx02HvuzHlgdi4A.jpg" },
                        new { Id = 6, AutomobileId = 10, PhotoURL = "2F67383_bcdF1iQcKvfS8pVNQji1jA.jpg" },
                        new { Id = 7, AutomobileId = 10, PhotoURL = "2F87369_5Wa45uatwG2YWrWeaeSJdg.jpg" },
                        new { Id = 8, AutomobileId = 12, PhotoURL = "2F60461_aTzsAiks7vfApZfBHNQkIg.jpg" },
                        new { Id = 9, AutomobileId = 12, PhotoURL = "2F60465__-xfUAcrDjwm1_wCDuXnQg.jpg" },
                        new { Id = 10, AutomobileId = 12, PhotoURL = "2F60469_gc4d6VeTIMxUQzgcuuX7Zg.jpg" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new { Id = 1, Name = "BMW" },
                        new { Id = 2, Name = "Mercedes" },
                        new { Id = 3, Name = "Nissan" },
                        new { Id = 4, Name = "Chevrolet" },
                        new { Id = 5, Name = "Ford" },
                        new { Id = 6, Name = "Toyota" },
                        new { Id = 7, Name = "Hyundai" },
                        new { Id = 8, Name = "Mitsubishi" },
                        new { Id = 9, Name = "Volkswagen" },
                        new { Id = 10, Name = "Lexus" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, Name = "Ağ" },
                        new { Id = 2, Name = "Bənövşəyi" },
                        new { Id = 3, Name = "Boz" },
                        new { Id = 4, Name = "Çəhrayı" },
                        new { Id = 5, Name = "Göy" },
                        new { Id = 6, Name = "Narıncı" },
                        new { Id = 7, Name = "Gümüşü" },
                        new { Id = 8, Name = "Mavi" },
                        new { Id = 9, Name = "Qara" },
                        new { Id = 10, Name = "Qəhvəyi" },
                        new { Id = 11, Name = "Qırmızı" },
                        new { Id = 12, Name = "Qızılı" },
                        new { Id = 13, Name = "Sarı" },
                        new { Id = 14, Name = "Yaş Asfalt" },
                        new { Id = 15, Name = "Yaşıl" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Turbo.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasData(
                        new { Id = 1, Name = "Benzin" },
                        new { Id = 2, Name = "Dizel" },
                        new { Id = 3, Name = "Qaz" },
                        new { Id = 4, Name = "Elektro" },
                        new { Id = 5, Name = "Hibrid" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new { Id = 1, Name = "Abşeron" },
                        new { Id = 2, Name = "Ağcabədi" },
                        new { Id = 3, Name = "Bakı" },
                        new { Id = 4, Name = "Biləsuvar" },
                        new { Id = 5, Name = "Cəlilabad" },
                        new { Id = 6, Name = "Daşkəsən" },
                        new { Id = 7, Name = "İmişli" },
                        new { Id = 8, Name = "Hacıqabul" },
                        new { Id = 9, Name = "Mingəçevir" },
                        new { Id = 10, Name = "Naxçıvan" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new { Id = 1, BrandId = 3, Name = "X-Trail" },
                        new { Id = 2, BrandId = 3, Name = "Sunny" },
                        new { Id = 3, BrandId = 3, Name = "Navara" },
                        new { Id = 4, BrandId = 2, Name = "GL-500" },
                        new { Id = 5, BrandId = 2, Name = "E-500" },
                        new { Id = 6, BrandId = 1, Name = "X6" },
                        new { Id = 7, BrandId = 1, Name = "M5" },
                        new { Id = 8, BrandId = 1, Name = "Z4" },
                        new { Id = 9, BrandId = 4, Name = "Camaro" },
                        new { Id = 10, BrandId = 4, Name = "Cruze" },
                        new { Id = 11, BrandId = 4, Name = "Niva" },
                        new { Id = 12, BrandId = 4, Name = "Aveo" },
                        new { Id = 13, BrandId = 5, Name = "Focus" },
                        new { Id = 14, BrandId = 5, Name = "Mustang" },
                        new { Id = 15, BrandId = 6, Name = "Avalon" },
                        new { Id = 16, BrandId = 6, Name = "Carolla" },
                        new { Id = 17, BrandId = 8, Name = "Grandis" },
                        new { Id = 18, BrandId = 8, Name = "Galant" },
                        new { Id = 19, BrandId = 9, Name = "Beetle" },
                        new { Id = 20, BrandId = 10, Name = "GS-350" },
                        new { Id = 21, BrandId = 10, Name = "UX-200" },
                        new { Id = 22, BrandId = 2, Name = "S-600" },
                        new { Id = 23, BrandId = 6, Name = "Camry" },
                        new { Id = 24, BrandId = 9, Name = "Passat" },
                        new { Id = 25, BrandId = 7, Name = "i40" },
                        new { Id = 26, BrandId = 7, Name = "Accent" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.NewsPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomUserId");

                    b.Property<string>("MainArticle")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("PhotoURL");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CustomUserId");

                    b.ToTable("NewsPosts");

                    b.HasData(
                        new { Id = 1, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 2, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 3, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 4, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 5, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 6, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 7, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" },
                        new { Id = 8, MainArticle = "Rəsmi açıqlanması ilin sonuna planlaşdırılan su ilə çalışan avtomobillər Çinin Pekin şəhərində istehsal olunacaq. Mütəxəssislər düşünür ki, bu avtomobillərin ixtira olunması ətraf mühitin qorunmasında başlıca rol oynayacaq.", PhotoURL = "2268_YN6kwuhS4v4ARvpPWj2Lwg.jpg", PublishDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), ShortInfo = "Su ilə çalışan avtomobillər meydana gəlir.", Title = "Avtomobil dünyasında yenilik" }
                    );
                });

            modelBuilder.Entity("Turbo.Models.SpeedControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SpeedControls");

                    b.HasData(
                        new { Id = 1, Name = "Mexaniki" },
                        new { Id = 2, Name = "Avtomat" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Turbo.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Turbo.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Turbo.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo.Models.Announcement", b =>
                {
                    b.HasOne("Turbo.Models.Automobile", "Automobile")
                        .WithMany("Announcements")
                        .HasForeignKey("AutomobileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo.Models.CustomUser", "CustomUser")
                        .WithMany("Announcements")
                        .HasForeignKey("CustomUserId");

                    b.HasOne("Turbo.Models.Location", "Location")
                        .WithMany("Announcements")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo.Models.Automobile", b =>
                {
                    b.HasOne("Turbo.Models.Color", "Color")
                        .WithMany("Automobiles")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo.Models.Fuel", "Fuel")
                        .WithMany("Automobiles")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo.Models.Model", "Model")
                        .WithMany("Automobiles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo.Models.SpeedControl", "SpeedControl")
                        .WithMany("Automobiles")
                        .HasForeignKey("SpeedControlId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo.Models.AutoPhoto", b =>
                {
                    b.HasOne("Turbo.Models.Automobile", "Automobile")
                        .WithMany("AutoPhotos")
                        .HasForeignKey("AutomobileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo.Models.Model", b =>
                {
                    b.HasOne("Turbo.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo.Models.NewsPost", b =>
                {
                    b.HasOne("Turbo.Models.CustomUser", "CustomUser")
                        .WithMany("NewsPosts")
                        .HasForeignKey("CustomUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
